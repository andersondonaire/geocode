const GeocodingServiceAdvanced = require('./geocoding-service-advanced');
const fs = require('fs').promises;

async function testeGrandeVolume() {
  console.log('üß™ Teste para Grandes Volumes (30k+ registros)\n');
  
  const geocoding = new GeocodingServiceAdvanced({
    rateLimitDelay: 500,    // Teste mais r√°pido
    batchSize: 50,          // Lotes menores para teste
    maxRetries: 2,          // Menos tentativas para teste
    cacheEnabled: true
  });
  
  console.log('üìä Criando dados de teste simulados...');
  
  // Simula 1000 registros para teste (representando 30k)
  const clientesTeste = [];
  const enderecosBrasil = [
    'Avenida Paulista, S√£o Paulo, SP',
    'Rua Oscar Freire, S√£o Paulo, SP',
    'Copacabana, Rio de Janeiro, RJ',
    'Avenida Atl√¢ntica, Rio de Janeiro, RJ',
    'Centro, Belo Horizonte, MG',
    'Savassi, Belo Horizonte, MG',
    'Boa Viagem, Recife, PE',
    'Centro, Salvador, BA',
    'Barra, Salvador, BA',
    'Centro, Bras√≠lia, DF'
  ];
  
  for (let i = 1; i <= 100; i++) { // 100 registros para teste r√°pido
    const endereco = enderecosBrasil[i % enderecosBrasil.length];
    clientesTeste.push({
      id: i,
      nome: `Cliente Teste ${i}`,
      endereco: `${endereco}, ${Math.floor(Math.random() * 1000) + 1}`,
      latitude: null,
      longitude: null,
      geocoded: false
    });
  }
  
  console.log(`üìç Iniciando teste com ${clientesTeste.length} registros`);
  console.log('‚öôÔ∏è  Configura√ß√£o otimizada para teste:');
  console.log(`   - Rate limit: ${geocoding.rateLimitDelay}ms`);
  console.log(`   - Lotes: ${geocoding.batchSize} registros`);
  console.log(`   - Cache: ${geocoding.cacheEnabled ? 'Habilitado' : 'Desabilitado'}`);
  
  const inicioTeste = Date.now();
  
  // Callback de progresso
  const onProgress = (progresso) => {
    const porcentagem = ((progresso.processados / progresso.total) * 100).toFixed(1);
    console.log(`‚è≥ ${porcentagem}% - Lote ${progresso.lote}/${progresso.totalLotes} - ${progresso.atual} (${progresso.status})`);
    
    if (progresso.stats) {
      const { success, errors, cached } = progresso.stats;
      console.log(`   üìä Sucessos: ${success}, Erros: ${errors}, Cache: ${cached}`);
    }
  };
  
  try {
    const clientesProcessados = await geocoding.processarClientesOtimizado(clientesTeste, onProgress);
    
    const fimTeste = Date.now();
    const tempoTeste = (fimTeste - inicioTeste) / 1000;
    
    // Gera relat√≥rio
    const relatorio = geocoding.gerarRelatorioDetalhado(clientesProcessados);
    
    console.log('\nüéâ TESTE CONCLU√çDO!');
    console.log('=' .repeat(60));
    console.log(`‚è±Ô∏è  Tempo de execu√ß√£o: ${tempoTeste.toFixed(1)} segundos`);
    console.log(`üìä Estat√≠sticas do teste:`);
    console.log(`   Total processados: ${relatorio.resumo.total}`);
    console.log(`   Sucessos: ${relatorio.resumo.geocodificados}`);
    console.log(`   Falhas: ${relatorio.resumo.naoGeocodificados}`);
    console.log(`   Taxa de sucesso: ${relatorio.resumo.taxaSucesso}`);
    console.log(`   Cache hits: ${relatorio.resumo.cacheHits}`);
    
    // Proje√ß√£o para 30k registros
    console.log('\nüöÄ PROJE√á√ÉO PARA 30.000 REGISTROS:');
    console.log('=' .repeat(60));
    
    const tempoPorRegistro = tempoTeste / clientesTeste.length;
    const tempo30k = (tempoPorRegistro * 30000) / 60; // em minutos
    const horas = Math.floor(tempo30k / 60);
    const minutos = Math.round(tempo30k % 60);
    
    console.log(`‚è±Ô∏è  Tempo estimado: ${horas}h ${minutos}min`);
    console.log(`üìà Velocidade: ${(clientesTeste.length / tempoTeste * 60).toFixed(1)} registros/minuto`);
    console.log(`üíæ Uso de mem√≥ria: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB`);
    
    // Recomenda√ß√µes
    console.log('\nüí° RECOMENDA√á√ïES PARA 30K REGISTROS:');
    console.log('=' .repeat(60));
    
    if (tempo30k > 480) { // Mais de 8 horas
      console.log('‚ö†Ô∏è  Tempo muito longo. Sugest√µes:');
      console.log('   - Reduzir rate limit para 800ms');
      console.log('   - Aumentar lote para 200 registros');
      console.log('   - Executar em m√∫ltiplas sess√µes');
    } else {
      console.log('‚úÖ Tempo aceit√°vel para processamento em lote');
    }
    
    if (relatorio.resumo.cacheHits > 0) {
      console.log(`üéØ Cache est√° funcionando (${relatorio.resumo.cacheHits} hits)`);
    }
    
    console.log('üì¶ Sistema preparado para grandes volumes!');
    
    // Salva amostra dos resultados
    const amostra = clientesProcessados.slice(0, 10);
    await fs.writeFile('teste-30k-amostra.json', JSON.stringify(amostra, null, 2));
    console.log('üíæ Amostra salva em: teste-30k-amostra.json');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  }
}

async function analisarPerformance() {
  console.log('\nüîç AN√ÅLISE DE PERFORMANCE PARA 30K REGISTROS');
  console.log('=' .repeat(60));
  
  const cenarios = [
    { rate: 1000, batch: 100, desc: 'Configura√ß√£o Padr√£o' },
    { rate: 800, batch: 200, desc: 'Otimizada para Velocidade' },
    { rate: 1500, batch: 50, desc: 'Conservadora (menos erros)' }
  ];
  
  cenarios.forEach(cenario => {
    const registrosPorSegundo = 1000 / cenario.rate;
    const tempoTotal = 30000 / registrosPorSegundo;
    const horas = Math.floor(tempoTotal / 3600);
    const minutos = Math.round((tempoTotal % 3600) / 60);
    
    console.log(`\nüìã ${cenario.desc}:`);
    console.log(`   Rate limit: ${cenario.rate}ms`);
    console.log(`   Tamanho do lote: ${cenario.batch}`);
    console.log(`   Tempo estimado: ${horas}h ${minutos}min`);
    console.log(`   Velocidade: ${(registrosPorSegundo * 60).toFixed(1)} reg/min`);
  });
}

// Executa os testes
if (require.main === module) {
  console.log('üöÄ SISTEMA DE TESTE PARA GRANDES VOLUMES\n');
  
  testeGrandeVolume()
    .then(() => analisarPerformance())
    .then(() => {
      console.log('\n‚úÖ Todos os testes conclu√≠dos!');
      console.log('üìñ Verifique o README.md para instru√ß√µes de otimiza√ß√£o');
    })
    .catch(error => {
      console.error('‚ùå Erro nos testes:', error.message);
    });
}

module.exports = { testeGrandeVolume, analisarPerformance };
